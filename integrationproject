"""Integration Project for COP 1500. A program to track volleyball
statistics throughout the season."""
__author__ = "Sydney Kiick"
# Introduction
print("Hello!", end=' ')
print("Welcome to an easy way to track volleyball stats.")
print("Tracking stats can be a very tedious job",
      "However, not anymore!", sep='. ')
print("REMEMBER: This program is made for tracking a normal volleyball "
      "match' therefore, the total sets should be between 3 and 5.")

# Blank line to make code look prettier
print('')

# Opening file to begin making the txt file
inFile = open("Statistics.txt", 'w')


def get_valid_float(prompt):
    """
    :param prompt: The prompt is whatever is inputted into the variable.
    :return: If a valid number, the function will print the number. If
    invalid, an error message will be printed.
    """
    while True:
        try:
            valid_float = float(input(prompt))
            break
        except ValueError:
            print("Error. Must be a number.")
    return valid_float


def main():
    """
    This function is the main function of the program. It asks the user for 
    information about the game and players. It then performs all of the 
    calculations and writes them in the text file named Statistics.txt. At 
    the end of the function, it then prints a quick summary of the results of 
    the 
    match.
    """
    # Game Information
    total_sets = get_valid_float("Total Sets (between 3 and 5): ")

    if total_sets == 3:
        to_1 = get_valid_float("Time Outs Used in Set 1: ")
        to_2 = get_valid_float("Time Outs Used in Set 2: ")
        to_3 = get_valid_float("Time Outs Used in Set 3: ")

        set_score_1_home = get_valid_float("Set One Score - Home Team: ")
        set_score_2_home = get_valid_float("Set Two Score - Home Team: ")
        set_score_3_home = get_valid_float("Set Three Score - Home Team: ")
        set_score_1_away = get_valid_float("Set One Score - Away Team: ")
        set_score_2_away = get_valid_float("Set Two Score - Away Team: ")
        set_score_3_away = get_valid_float("Set Three Score - Away Team: ")

        # Adding up number of timeouts used
        total_time_outs = to_1 + to_2 + to_3

        # Subtracting the number of timeouts used from the total available
        # (2 per set)
        time_outs_remaining = (total_sets * 2) - total_time_outs

        # Printing Game Stats
        home_team = 0
        away_team = 0
        inFile.write("* GAME STATS " * 3 + "*")
        inFile.write("\n")
        inFile.write("\nTime Outs Remaining: " + str(time_outs_remaining))
        inFile.write("\nSet One Score: " + str(set_score_1_home) + " - "
                     + str(set_score_1_away))
        if set_score_1_home > set_score_1_away:
            inFile.write("\nHOME TEAM WINS SET 1")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 1")
            away_team += 1
        inFile.write("\nGame Two Score: "
                     + str(set_score_2_home) + " - " + str(set_score_2_away))
        if set_score_2_home > set_score_2_away:
            inFile.write("\nHOME TEAM WINS SET 2")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 2")
            away_team += 1
        inFile.write("\nSet Three Score: "
                     + str(set_score_3_home) + " - " + str(set_score_3_away))
        if set_score_3_home > set_score_3_away:
            inFile.write("\nHOME TEAM WINS SET 3")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 3")
            away_team += 1
        inFile.write("\n")
        inFile.write("END SCORE: ")
        if home_team or away_team == 0:
            inFile.write("WINNING TEAM SWEEPS""\n")
        elif home_team > away_team:
            inFile.write("HOME TEAM WINS GAME""\n")
        elif away_team > home_team:
            inFile.write("AWAY TEAM WINS GAME""\n")

    elif total_sets == 4:
        to_1 = get_valid_float("Time Outs Used in Set 1: ")
        to_2 = get_valid_float("Time Outs Used in Set 2: ")
        to_3 = get_valid_float("Time Outs Used in Set 3: ")
        to_4 = get_valid_float("Time Outs Used in Set 4: ")

        set_score_1_home = get_valid_float("Set One Score - Home Team: ")
        set_score_2_home = get_valid_float("Set Two Score - Home Team: ")
        set_score_3_home = get_valid_float("Set Three Score - Home Team: ")
        set_score_4_home = get_valid_float("Set Four Score - Home Team: ")
        set_score_1_away = get_valid_float("Set One Score - Away Team: ")
        set_score_2_away = get_valid_float("Set Two Score - Away Team: ")
        set_score_3_away = get_valid_float("Set Three Score - Away Team: ")
        set_score_4_away = get_valid_float("Set Four Score - Away Team: ")

        # Adding up number of timeouts used
        total_time_outs = to_1 + to_2 + to_3 + to_4

        # Subtracting the number of timeouts used from the total available
        # (2 per set)
        time_outs_remaining = (total_sets * 2) - total_time_outs

        # Printing Game Stats
        home_team = 0
        away_team = 0
        inFile.write("* GAME STATS " * 3 + "*")
        inFile.write("\n")
        inFile.write("\nTime Outs Remaining: " + str(time_outs_remaining))
        inFile.write("\nSet One Score: " + str(set_score_1_home) + " - "
                     + str(set_score_1_away))
        if set_score_1_home > set_score_1_away:
            inFile.write("\nHOME TEAM WINS SET 1")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 1")
            away_team += 1
        inFile.write("\nGame Two Score: "
                     + str(set_score_2_home) + " - " + str(set_score_2_away))
        if set_score_2_home > set_score_2_away:
            inFile.write("\nHOME TEAM WINS SET 2")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 2")
            away_team += 1
        inFile.write("\nSet Three Score: "
                     + str(set_score_3_home) + " - " + str(set_score_3_away))
        if set_score_3_home > set_score_3_away:
            inFile.write("\nHOME TEAM WINS SET 3")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 3")
            away_team += 1
        inFile.write("\nSet Four Score: "
                     + str(set_score_4_home) + " - " + str(set_score_4_away))
        if set_score_4_home > set_score_4_away:
            inFile.write("\nHOME TEAM WINS SET 4")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 4")
            away_team += 1
        inFile.write("\n")
        inFile.write("END SCORE: ")
        if home_team or away_team == 0:
            inFile.write("WINNING TEAM SWEEPS""\n")
        elif home_team > away_team:
            inFile.write("HOME TEAM WINS GAME""\n")
        elif away_team > home_team:
            inFile.write("AWAY TEAM WINS GAME""\n")

    elif total_sets == 5:
        to_1 = get_valid_float("Time Outs Used in Set 1: ")
        to_2 = get_valid_float("Time Outs Used in Set 2: ")
        to_3 = get_valid_float("Time Outs Used in Set 3: ")
        to_4 = get_valid_float("Time Outs Used in Set 4: ")
        to_5 = get_valid_float("Time Outs Used in Set 5: ")

        set_score_1_home = get_valid_float("Set One Score - Home Team: ")
        set_score_2_home = get_valid_float("Set Two Score - Home Team: ")
        set_score_3_home = get_valid_float("Set Three Score - Home Team: ")
        set_score_4_home = get_valid_float("Set Four Score - Home Team: ")
        set_score_5_home = get_valid_float("Set Five Score - Home Team: ")
        set_score_1_away = get_valid_float("Set One Score - Away Team: ")
        set_score_2_away = get_valid_float("Set Two Score - Away Team: ")
        set_score_3_away = get_valid_float("Set Three Score - Away Team: ")
        set_score_4_away = get_valid_float("Set Four Score - Away Team: ")
        set_score_5_away = get_valid_float("Set Five Score - Away Team: ")

        # Adding up number of timeouts used
        total_time_outs = to_1 + to_2 + to_3 + to_4 + to_5

        # Subtracting the number of timeouts used from the total available
        # (2 per set)
        time_outs_remaining = (total_sets * 2) - total_time_outs

        # Printing Game Stats
        home_team = 0
        away_team = 0
        inFile.write("* GAME STATS " * 3 + "*")
        inFile.write("\n")
        inFile.write("\nTime Outs Remaining: " + str(time_outs_remaining))
        inFile.write("\nSet One Score: " + str(set_score_1_home) + " - "
                     + str(set_score_1_away))
        if set_score_1_home > set_score_1_away:
            inFile.write("\nHOME TEAM WINS SET 1")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 1")
            away_team += 1
        inFile.write("\nGame Two Score: "
                     + str(set_score_2_home) + " - " + str(set_score_2_away))
        if set_score_2_home > set_score_2_away:
            inFile.write("\nHOME TEAM WINS SET 2")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 2")
            away_team += 1
        inFile.write("\nSet Three Score: "
                     + str(set_score_3_home) + " - " + str(set_score_3_away))
        if set_score_3_home > set_score_3_away:
            inFile.write("\nHOME TEAM WINS SET 3")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 3")
            away_team += 1
        inFile.write("\nSet Four Score: "
                     + str(set_score_4_home) + " - " + str(set_score_4_away))
        if set_score_4_home > set_score_4_away:
            inFile.write("\nHOME TEAM WINS SET 4")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 4")
            away_team += 1
        inFile.write("\nSet Five Score: " + str(set_score_5_home) + " - " +
                     str(set_score_5_away))
        if set_score_5_home > set_score_5_away:
            inFile.write("\nHOME TEAM WINS SET 5")
            home_team += 1
        else:
            inFile.write("\nAWAY TEAM WINS SET 5")
            away_team += 1
        inFile.write("\n")
        inFile.write("END SCORE: ")
        if home_team or away_team == 0:
            inFile.write("WINNING TEAM SWEEPS""\n")
        elif home_team > away_team:
            inFile.write("HOME TEAM WINS GAME""\n")
        elif away_team > home_team:
            inFile.write("AWAY TEAM WINS GAME""\n")
    else:
        print("Error: Total Sets should be between 3 and 5. "
              "Please rerun the program.")
        home_team = 0
        away_team = 0

    # Blank line to make code look prettier
    print('')

    total_number_of_players = get_valid_float("Number of players on the "
                                              "team: ")
    for x in range(int(total_number_of_players)):
        name = input("Name of Player: ")
        inFile.write("\n"+name)

    inFile.write("\n")

    number_of_players = get_valid_float("Number of players to track: ")
    while number_of_players != 0:
        # Basic Information
        player_name = input("Specific Player Name: ")
        player_number = get_valid_float("Player Number: ")
        player_position = input("Player Position: ")
        sets_played = get_valid_float("Number of sets played in: ")

        # Player Statistics
        player_passes = get_valid_float("Number of Passes: ")
        player_assists = get_valid_float("Number of Assists: ")
        player_digs = get_valid_float("Number of Digs: ")
        player_serves = get_valid_float("Number of Serves: ")
        player_aces = get_valid_float("Number of Aces: ")
        player_hits = get_valid_float("Number of Hits: ")
        player_kills = get_valid_float("Number of Kills: ")
        print("")

        # Basic Calculations
        # Using the modulus function to provide
        # the number of sets the player did not play in
        sets_benched = total_sets % sets_played
        # Dividing the number of kills by the total number of hits
        # to find the kill percentage.
        # If statement is needed because you cant divide by 0
        if player_hits > 0:
            kill_percentage = (player_kills / player_hits) * 100
        else:
            kill_percentage = 0
        # Dividing the number of aces by the total number of serves
        # to find the ace percentage.
        # If statement is needed because you cant divide by 0
        if player_serves > 0:
            ace_percentage = (player_aces / player_serves) * 100
        else:
            ace_percentage = 0
        # Adding up all the touches on the ball to determine the total touches
        total_touches = \
            player_passes \
            + player_assists + player_digs + player_serves + player_hits
        # Average number of passes per set (whole number since you cant have
        # half of a pass).
        average_passes = total_touches // sets_played
        # Assuming that with each game that passes, you are likely to touch
        # 1/3 less balls because you are tired (hypothetical scenario,
        # the number 1/3 is made up). This function takes the total
        # number of passes and calculates the estimated passes in the first
        # game.
        exponential = player_passes * (1/3) ** (sets_played - 1)

        # Printing Player Stats
        inFile.write("\n")
        inFile.write("* PLAYER STATS " * 3 + "*")
        inFile.write("\n")
        inFile.write("\nPlayer: " + "#" + str(player_number)
                     + " " + player_name)
        inFile.write("\nPlayer Position: " + player_position)
        inFile.write("\nSets Played: " + str(sets_played))
        inFile.write("\nSets Benched: " + str(sets_benched))
        inFile.write("\nTotal Passes: " + str(player_passes))
        inFile.write("\nTotal Assists: " + str(player_assists))
        inFile.write("\nTotal Digs: " + str(player_digs))
        inFile.write("\nKill Percentage: " + str(format(kill_percentage,
                                                        '.0f') + "%"))
        inFile.write("\nAce Percentage: " + str(format(ace_percentage,
                                                       '.0f') + "%"))
        inFile.write("\nTotal Touches: " + str(total_touches))
        inFile.write("\nAverage Passes per set: " + str(average_passes))
        inFile.write("\nEstimated passes in first set: " + str(format(
            exponential, '.0f')))
        inFile.write("\n")

        # Continue asking for stats?
        number_of_players -= 1

    # Closing Remarks
    print("Finished! All of the statistics on the game can be found in the "
          "txt file named Statistics.txt.")

    print("")

    print("Random True or False Questions about the Game")
    print("Final Score: ")
    print("Home Team: ", home_team)
    print("Away Team: ", away_team)
    print("True or False: The home team won the game")
    print(home_team == 3 and away_team != 5)
    print("True of False: The home team swept the game")
    print(home_team == 3 and away_team == 0)
    print("True or False: The away team won the game")
    print(not (home_team >= 3))
    print("True of False: The away team swept the game")
    print(away_team == 3 and home_team == 0)

    # Close file
    inFile.close()


main()
